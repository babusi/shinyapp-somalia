K<- rain.long[(t- 5),"Woqooyi_Galbeed_rain"]
L<- mean(fatalities.long[(t-5):(t- 1),"Galguduud_Fatalities"], na.rm=TRUE)
M<- rain.long[(t- 6),"Shabeellaha_Dhexe_rain"]
N<- mean(fatalities.long[(t-10):(t- 1),"Sool_Fatalities"], na.rm=TRUE)
O<- median(fatalities.long[(t-17):(t- 1),"Sool_Fatalities"], na.rm=TRUE)
P<- conflicts.long[(t- 3),"Shabeellaha_Hoose_Conflict"]
Q<- max(A*B, C*D,na.rm=TRUE)
R<- max(I, 9.36406661543063*J,na.rm=TRUE)
S<- max(E*G/H, R,na.rm=TRUE)
U<- max(sum(K*L , M*N*O,na.rm=TRUE), P,na.rm=TRUE)
if(is.infinite(Q)){Q <- 0 }
if(is.infinite(S)){S <- 0 }
if(is.infinite(U)){U <- 0 }
FIN <-sum( Q , S , U , -1796.93556600875,na.rm=TRUE)
PA[t] <- FIN
#Bay_Incidents
PI[t] <- 0
#Bay_Departures
PD[t] <- 0
}
write.csv(as.data.frame(PA[1:length(PA)]), file ="results.csv",row.names = FALSE)
return(PA)
}
fmonths_start <- which(conflicts.long$Date == monthStart(as.Date("2017-01-01")))
fmonths_end <- which(conflicts.long$Date == monthStart(as.Date("2018-01-01")))
region <- "Jubbada_Hoose"
reg_con <- paste(region,"Conflict",sep="_")
reg_arr <- paste(region,"CurrentRegion",sep="_")
reg_dep <- paste(region,"BeforeRegion",sep="_")
reg_rain <- paste(region,"rain",sep="_")
I <- conflicts.long[ fmonths_start:fmonths_end,reg_con]
A <- current.long[ fmonths_start:fmonths_end, reg_arr ]
D <- before.long[ fmonths_start:fmonths_end, reg_dep ]
#AA <- A[(total_len-30):total_len]
R <- rain.long[ fmonths_start:fmonths_end, reg_rain]
len <- fmonths_end - fmonths_start+1
PI <- PA <- PD <- rep(NA, len)
PA <- LJ_8arrivals(fmonths_start, fmonths_end)
PI <- PA[fmonths_start:fmonths_end]
PB <- LJ_1Xarrivals(fmonths_start, fmonths_end)
PJ <- PB[fmonths_start:fmonths_end]
PC <- LJ_9Xarrivals(fmonths_start, fmonths_end)
PK <- PC[fmonths_start:fmonths_end]
A<- A[1:len]
Date <- conflicts.long$Date[fmonths_start:fmonths_end]
long <- data.frame(
Period=rep((1:len),2),
Date=Date,
Actual_Arrivals = A,
Algorithm_1 = as.integer(PI),
Algorithm_2 = as.integer(PJ),
Algorithm_3 = as.integer(PK))
Actual_Arrivals <- A
Model_Arrivals <- PI
Date <- Date
wide <- cbind(Date = format(Date,"%Y %b"),
Actual_Arrivals = as.integer(Actual_Arrivals),
Model_Arrivals =as.integer(Model_Arrivals))
list(long=long, wide=wide)
long <- data.frame(
Period=rep((1:len),2),
Date=format(Date,"%Y %b"),
Actual_Arrivals = A,
Algorithm_1 = as.integer(PI),
Algorithm_2 = as.integer(PJ),
Algorithm_3 = as.integer(PK))
long
long <- pred_data()[["long"]]
econ <- transform(long, date = as.character(Date))
econ
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
return(m1)
m1
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
long <- data.frame(
Period=rep((1:len),2),
Date=Date,
Actual_Arrivals = A,
Algorithm_1 = as.integer(PI),
Algorithm_2 = as.integer(PJ),
Algorithm_3 = as.integer(PK))
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
m1
long
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
Date <- conflicts.long$Date[fmonths_start:fmonths_end]
long <- data.frame(
Period=rep((1:len),2),
Date=Date,
Actual_Arrivals = A,
Algorithm_1 = as.integer(PI),
Algorithm_2 = as.integer(PJ),
Algorithm_3 = as.integer(PK))
Actual_Arrivals <- A
Model_Arrivals <- PI
Date <- Date
wide <- cbind(Date = format(Date,"%Y %b"),
Actual_Arrivals = as.integer(Actual_Arrivals),
Model_Arrivals =as.integer(Model_Arrivals))
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
as.character.Date(Date)
runApp()
format(Date,"%Y %b")
Date <- format(Date,"%Y %b")
Date
as.character(Date)
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
m1
econ
econ <- transform(long, date = as.character(Date))
econ
A<- A[1:len]
Date <- conflicts.long$Date[fmonths_start:fmonths_end]
long <- data.frame(
Period=rep((1:len),2),
Date=format(Date,"%Y %b"),
Actual_Arrivals = A,
Algorithm_1 = as.integer(PI),
Algorithm_2 = as.integer(PJ),
Algorithm_3 = as.integer(PK))
lonf
long
econ <- transform(long, date = as.character(Date))
econ
econ
runApp()
runApp()
runApp()
m1
m1$xAxis
runApp()
A<- A[1:len]
Date <- conflicts.long$Date[fmonths_start:fmonths_end]
long <- data.frame(
Period=rep((1:len),2),
Date= Date,
Actual_Arrivals = A,
Algorithm_1 = as.integer(PI),
Algorithm_2 = as.integer(PJ),
Algorithm_3 = as.integer(PK))
long
econ <- transform(long, date = as.character(Date))
econ
typeof(long.date)
typeof(long$Date)
typeof(long$date)
long.date
econ.date
econ$date
typeof(econ$date)
typeof(econ$Date)
runApp()
runApp()
mPlot()
runApp()
econ <- transform(long, date = as.character(format(Date,"%Y %b")))
econ
m1$set(xlabels = "date")
m1
econ <- transform(long, date = as.character(format(Date,"%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1$set(xlabeafsls = "date")
econ <- transform(long, date = as.character(format(Date,"%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
m1
m1$set(xLabelFormat=format(Date,"%Y %b"))
m
m1
econ <- transform(long, date = as.character(format(Date,"%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1$set(xLabelFormat=format(Date,"%Y %b"))
m1
m1$set(xLabelFormat="%Y %b")
m1
econ <- transform(long, date = as.character(format(Date,"%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
return(m1)
m1
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
m1$set(xLabelFormat="%Y %b")
m1
m1$set(xLabelFormat="#function(x) {return(econ.date.format("%Y %b"))}#")
m1$set(xLabelFormat="#function(x) {return(econ.date.format("%Y %b"));}#")
m1$set()
m1$set(xLabelFormat)
m1$set(xLabelFormat = "n;a")
m1
m1$set(xLabelFormat="#!function(x) {return(econ.date.format("%Y %b"));}!#")
econ <- transform(long, date = as.character(strptime(long$Date, format = "%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
econ <- transform(long, date = as.character(strptime(long$Date, format = "%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
econ
econ <- transform(long, date = as.character(strptime(Date, format = "%Y %b")))
exon
econ
econ <- transform(long, Date = as.character(strptime(Date, format = "%Y %b")))
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
econ
econ <- transform(long, Date = as.character(strptime(long$Date, format = "%Y %b")))
econ <- transform(long, Date = as.character(strptime(long$Date, format = "%Y %b")))
econ
as.character(strptime(long$Date, format = "%Y %b"))
long$Date
as.character(strptime(Date =  format = "%Y %b"))
as.character(strptime(long$Date, transform(df1, Date = as.character(strptime(df1$Date, format = "%Y%m%d")))format = "%Y %b"))
transform(long, Date = as.character(strptime(long$Date, format = "%Y%m%d")))
transform(long, Date = as.character(strptime(long$Date, format = "%Y%m%d")))
Date = as.character(strptime(long$Date, format = "%Y%m%d"))
Date
Date = as.character(strptime(long$Date, format = "%Y-%m-%d"))
Date
Date = as.character(format(strptime(long$Date, format = "%Y-%m-%d"),"%Y %b"))
Date
econ <- transform(long, Date = as.character(format(strptime(long$Date, format = "%Y-%m-%d"),"%Y %b")))
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
econ <- transform(long, Date = as.character(format(strptime(long$Date, format = "%Y-%m-%d"),"%Y %b")))
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
return(m1)
date
long.date
long$Date
long$Date
runApp()
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "Date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
long
econ
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
return(m1)
m1
econ
econ <- transform(long, date = as.character(format(strptime(long$Date, format = "%Y-%m-%d"),"%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
econ
econ <- transform(long, date = as.character(format(strptime(long$Date, format = "%Y-%m-%d"),"%Y %b")))
m1 <- mPlot(x = c("date","Date"), y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
econ <- transform(long, date = as.character(format(strptime(long$Date, format = "%Y-%m-%d"),"%Y %b")))
m1 <- mPlot(x = c("date"), y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
runApp()
econ <- transform(long, date = as.character(Date))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
econ <- transform(long, date = as.character(Algorithm_1))
econ <- transform(long, hate = as.character(Algorithm_1))
econ
econ <- transform(long, date = as.character(Date))
econ <- transform(long, hate = as.character(Algorithm_1))
econ <- transform(long, date = as.character(format(Date,"%Y %b")))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
runApp()
econ <- transform(long, date = as.character(format(Date,"%b %Y")))
econ <- transform(long, hate = as.character(Algorithm_1))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
econ <- transform(long, date = as.character(format(Date,"%b %Y")))
#econ <- transform(long, hate = as.character(Algorithm_1))
m1 <- mPlot(x = "date", y = c("Actual_Arrivals","Algorithm_1", "Algorithm_2", "Algorithm_3"), type = "Line", data = econ)
#m1$addParams(height = 500, dom = 'graph1')
#m1$set(xLabelFormat = "Date")
m1$set(lineColors=c("blue", "red", "purple", "#FF00FF"))
m1
econ$date
levels()
levels(Date)
levels(long$Date)
levels(long$date)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
setwd("C:/Users/splushys")
#first install the following packages: readxl, mice, VIM, missForest, googlesheets. like: install.packages("googlesheets")
#apply CTRL + F --> SELECT ALL (put in find the name of the previous region to replace the other name of region in the sheet)**
library(readxl)
library(mice)
library(googlesheets)
library(dplyr)
#name your data framework (df) by reading data from excel <- this is just to run in a simple excel
#Bay <- read_excel("~/Desktop/14A.xlsx",
#col_types = c("date", "numeric", "numeric"))
#TO RUN VIA GOOGLE SHEETS
#name your data framework (df) by reading data from googlesheets (automatizing)
myURL <-"https://docs.google.com/spreadsheets/d/e/2PACX-1vTGcnmYMki3euv4bcsgBqBRY1-sDl6zkVl0gGC8THLygJoYlYnfm4cY5bVCA8BXnmciFXnp6aEvow31/pub?gid=808293913&single=true&output=csv"
Bay<-read.csv(url(myURL))
#glimpse your google sheet to see also columns auto-assigned names
Bay %>% glimpse()
#register your google sheet
Baysheet <-gs_title("correlations")
#get the key of your sheet
Baysheet_key <-gs_gap_key()
#define variables/columns to be correlated - change depending on sheet **
Date <- Baysheet %>% gs_read(w= "Bay", range = "A1:A97")
actualarrivals <- (Baysheet %>% gs_read(w= "Bay", range = "B1:B97"))
#substitute name of the column depending on the function. (e.g. Column 1 = A, Column 2 = B, and Column C = 3, and so on...)
modelarrivals_BAYA1 <- Baysheet %>% gs_read(w= "Bay", range = "C1:C97")
modelarrivals_BAYA2 <- Baysheet %>% gs_read(w= "Bay", range = "D1:D97")
modelarrivals_BAYA3 <- Baysheet %>% gs_read(w= "Bay", range = "E1:E97")
modelarrivals_BAYA4 <- Baysheet %>% gs_read(w= "Bay", range = "F1:F97")
modelarrivals_BAYA5 <- Baysheet %>% gs_read(w= "Bay", range = "G1:G97")
modelarrivals_BAYA6 <- Baysheet %>% gs_read(w= "Bay", range = "H1:H97")
modelarrivals_BAYA7 <- Baysheet %>% gs_read(w= "Bay", range = "I1:I97")
modelarrivals_BAY1 <- Baysheet %>% gs_read(w= "Bay", range = "J1:J97")
modelarrivals_BAY2 <- Baysheet %>% gs_read(w= "Bay", range = "K1:K97")
modelarrivals_BAY3 <- Baysheet %>% gs_read(w= "Bay", range = "L1:L97")
modelarrivals_BAY4 <- Baysheet %>% gs_read(w= "Bay", range = "M1:M97")
modelarrivals_BAY5 <- Baysheet %>% gs_read(w= "Bay", range = "N1:N97")
modelarrivals_BAY6 <- Baysheet %>% gs_read(w= "Bay", range = "O1:O97")
modelarrivals_BAY7 <- Baysheet %>% gs_read(w= "Bay", range = "P1:P97")
modelarrivals_BAY8 <- Baysheet %>% gs_read(w= "Bay", range = "Q1:Q97")
modelarrivals_BAY9 <- Baysheet %>% gs_read(w= "Bay", range = "R1:R97")
modelarrivals_BAY10 <- Baysheet %>% gs_read(w= "Bay", range = "S1:S97")
modelarrivals_BAY11 <- Baysheet %>% gs_read(w= "Bay", range = "T1:T97")
modelarrivals_BAY12 <- Baysheet %>% gs_read(w= "Bay", range = "U1:U97")
modelarrivals_BAY13 <- Baysheet %>% gs_read(w= "Bay", range = "V1:V97")
modelarrivals_BAY14 <- Baysheet %>% gs_read(w= "Bay", range = "W1:W97")
modelarrivals_BAY15 <- Baysheet %>% gs_read(w= "Bay", range = "X1:X97")
modelarrivals_BAY16 <- Baysheet %>% gs_read(w= "Bay", range = "Y1:Y97")
modelarrivals_BAY17 <- Baysheet %>% gs_read(w= "Bay", range = "Z1:Z97")
modelarrivals_minus1_1 <- Baysheet %>% gs_read(w= "Bay", range = "AA1:AA97")
modelarrivals_minus1_2 <- Baysheet %>% gs_read(w= "Bay", range = "AB1:AB97")
modelarrivals_minus1_3 <- Baysheet %>% gs_read(w= "Bay", range = "AC1:AC97")
modelarrivals_minus1_4 <- Baysheet %>% gs_read(w= "Bay", range = "AD1:AD97")
modelarrivals_minus1_5 <- Baysheet %>% gs_read(w= "Bay", range = "AE1:AE97")
#plot variables, with title just to visualize them
plot(x,y, main="Actual Arrivals vs. Model Arrivals, Bay", xlab="Actual Arrivals", ylab="Model Arrivals", pch=15, cex=1, col="blue")
#install mice for imputation of NAs prior COR
#install.packages("mice")
library(mice)
#understanding missing patterns of data
md.pattern(Bay)
#visualize missing patterns, install package
#install.packages("VIM")
library(VIM)
#install.packages("missForest")
library(missForest)
#graph missing data by %. If more than 50% then is not ideal to run a correlation
aggr_plot <- aggr(Bay, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(Bay), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#another visual
marginplot(Bay[c(1,2)])
#----> RE-RUN from here the MICE correlation everytime need to change variable<-----
#Generate 10% missing values at Random
arrivals.mis <- prodNA(Bay, noNA = 0.1)
summary(arrivals.mis)
#In case needed: remove categorical variables
#arrivals.mis <- subset(arrivals.mis, select = -c(Date))
#summary(arrivals.mis)
#select only the variables you need to correlate (subset)
#lapply(arrivals.mis, as.numeric)
arrivals.mis <-select(arrivals.mis, actualarrivals, modelarrivals_BAY10) #<-- CHANGE HERE TOO THE MODELARRIVALS.X variable to run different ones
#imputation of NAs
arrivalsimp<- mice(arrivals.mis, m=5, maxit=50, meth='pmm', seed=500)
summary(arrivalsimp)
completeData <- complete(arrivalsimp,2)
#correlation for machine/human to decide the best fit
cor(completeData)
#first install the following packages: readxl, mice, VIM, missForest, googlesheets. like: install.packages("googlesheets")
#apply CTRL + F --> SELECT ALL (put in find the name of the previous region to replace the other name of region in the sheet)**
library(readxl)
library(mice)
library(googlesheets)
library(dplyr)
#name your data framework (df) by reading data from excel <- this is just to run in a simple excel
#Bay <- read_excel("~/Desktop/14A.xlsx",
#col_types = c("date", "numeric", "numeric"))
#TO RUN VIA GOOGLE SHEETS
#name your data framework (df) by reading data from googlesheets (automatizing)
myURL <-"https://docs.google.com/spreadsheets/d/e/2PACX-1vTGcnmYMki3euv4bcsgBqBRY1-sDl6zkVl0gGC8THLygJoYlYnfm4cY5bVCA8BXnmciFXnp6aEvow31/pub?gid=808293913&single=true&output=csv"
Bay<-read.csv(url(myURL))
#glimpse your google sheet to see also columns auto-assigned names
Bay %>% glimpse()
#register your google sheet
Baysheet <-gs_title("correlations")
#get the key of your sheet
Baysheet_key <-gs_gap_key()
#define variables/columns to be correlated - change depending on sheet **
Date <- Baysheet %>% gs_read(w= "Bay", range = "A1:A97")
actualarrivals <- (Baysheet %>% gs_read(w= "Bay", range = "B1:B97"))
#substitute name of the column depending on the function. (e.g. Column 1 = A, Column 2 = B, and Column C = 3, and so on...)
modelarrivals_BAYA1 <- Baysheet %>% gs_read(w= "Bay", range = "C1:C97")
modelarrivals_BAYA2 <- Baysheet %>% gs_read(w= "Bay", range = "D1:D97")
modelarrivals_BAYA3 <- Baysheet %>% gs_read(w= "Bay", range = "E1:E97")
modelarrivals_BAYA4 <- Baysheet %>% gs_read(w= "Bay", range = "F1:F97")
modelarrivals_BAYA5 <- Baysheet %>% gs_read(w= "Bay", range = "G1:G97")
modelarrivals_BAYA6 <- Baysheet %>% gs_read(w= "Bay", range = "H1:H97")
modelarrivals_BAYA7 <- Baysheet %>% gs_read(w= "Bay", range = "I1:I97")
modelarrivals_BAY1 <- Baysheet %>% gs_read(w= "Bay", range = "J1:J97")
modelarrivals_BAY2 <- Baysheet %>% gs_read(w= "Bay", range = "K1:K97")
modelarrivals_BAY3 <- Baysheet %>% gs_read(w= "Bay", range = "L1:L97")
modelarrivals_BAY4 <- Baysheet %>% gs_read(w= "Bay", range = "M1:M97")
modelarrivals_BAY5 <- Baysheet %>% gs_read(w= "Bay", range = "N1:N97")
modelarrivals_BAY6 <- Baysheet %>% gs_read(w= "Bay", range = "O1:O97")
modelarrivals_BAY7 <- Baysheet %>% gs_read(w= "Bay", range = "P1:P97")
modelarrivals_BAY8 <- Baysheet %>% gs_read(w= "Bay", range = "Q1:Q97")
modelarrivals_BAY9 <- Baysheet %>% gs_read(w= "Bay", range = "R1:R97")
modelarrivals_BAY10 <- Baysheet %>% gs_read(w= "Bay", range = "S1:S97")
modelarrivals_BAY11 <- Baysheet %>% gs_read(w= "Bay", range = "T1:T97")
modelarrivals_BAY12 <- Baysheet %>% gs_read(w= "Bay", range = "U1:U97")
modelarrivals_BAY13 <- Baysheet %>% gs_read(w= "Bay", range = "V1:V97")
modelarrivals_BAY14 <- Baysheet %>% gs_read(w= "Bay", range = "W1:W97")
modelarrivals_BAY15 <- Baysheet %>% gs_read(w= "Bay", range = "X1:X97")
modelarrivals_BAY16 <- Baysheet %>% gs_read(w= "Bay", range = "Y1:Y97")
modelarrivals_BAY17 <- Baysheet %>% gs_read(w= "Bay", range = "Z1:Z97")
modelarrivals_minus1_1 <- Baysheet %>% gs_read(w= "Bay", range = "AA1:AA97")
modelarrivals_minus1_2 <- Baysheet %>% gs_read(w= "Bay", range = "AB1:AB97")
modelarrivals_minus1_3 <- Baysheet %>% gs_read(w= "Bay", range = "AC1:AC97")
modelarrivals_minus1_4 <- Baysheet %>% gs_read(w= "Bay", range = "AD1:AD97")
modelarrivals_minus1_5 <- Baysheet %>% gs_read(w= "Bay", range = "AE1:AE97")
#plot variables, with title just to visualize them
plot(x,y, main="Actual Arrivals vs. Model Arrivals, Bay", xlab="Actual Arrivals", ylab="Model Arrivals", pch=15, cex=1, col="blue")
#install mice for imputation of NAs prior COR
#install.packages("mice")
library(mice)
#understanding missing patterns of data
md.pattern(Bay)
#visualize missing patterns, install package
#install.packages("VIM")
library(VIM)
#install.packages("missForest")
library(missForest)
#graph missing data by %. If more than 50% then is not ideal to run a correlation
aggr_plot <- aggr(Bay, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(Bay), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#another visual
marginplot(Bay[c(1,2)])
#----> RE-RUN from here the MICE correlation everytime need to change variable<-----
#Generate 10% missing values at Random
arrivals.mis <- prodNA(Bay, noNA = 0.1)
summary(arrivals.mis)
#In case needed: remove categorical variables
#arrivals.mis <- subset(arrivals.mis, select = -c(Date))
#summary(arrivals.mis)
#select only the variables you need to correlate (subset)
#lapply(arrivals.mis, as.numeric)
arrivals.mis <-select(arrivals.mis, actualarrivals, modelarrivals_BAY10) #<-- CHANGE HERE TOO THE MODELARRIVALS.X variable to run different ones
#imputation of NAs
arrivalsimp<- mice(arrivals.mis, m=5, maxit=50, meth='pmm', seed=500)
summary(arrivalsimp)
completeData <- complete(arrivalsimp,2)
#correlation for machine/human to decide the best fit
cor(completeData)
modelarrivals_minus1_1 <- Baysheet %>% gs_read(w= "Bay", range = "AA1:AA97")
setwd("C:/Users/splushys/Google Drive/UNHCR/App/Somalia")
runApp()
runApp()
